"""
Django settings for rl_proto2 project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import subprocess
from django.contrib.messages import constants as messages

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-q=$o21(cce9qp(*&zxg46+p1e10k-r24^-iajbi$7+k4x(ily'

ALLOWED_HOSTS = []


# Register Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# When user is not authenticated, default landing page:
LOGIN_URL = '/accounts/login/'

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-Party
    'corsheaders',
    'widget_tweaks',
    'bootstrap3',
    'djcelery',
    'polymorphic',
    'jquery',
    'jquery_ui',
    'djangoformsetjs',
    'storages',
    'django_extensions',
    'rest_framework',
    'djangojs',
    # Local
    'accounts',
    'notifications',
    'payments',
    'integrations',
    'integrations.salesforce',
    'program_manager',
    'field_mapper',
    'qscore',
    'reports',
    'events',
    'api'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
    'rl_proto2.jsonp.JSONPMiddleware',
    'rl_proto2.jsonp.DisableClientSideCachingMiddleware',
)

ROOT_URLCONF = 'rl_proto2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['rl_proto2/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.core.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rl_proto2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'www/static/'
STATICFILES_DIRS = (
    os.path.join(
        os.path.dirname(__file__),
        'static',
    ),
)

LIST_IMPORT_ROOT = os.path.join(BASE_DIR, 'media/list_import')

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

LOGGING = {
    'version': 1,
    'filters': [],
    'formatters': {
        'simple': {
            'format': '[%(levelname)s] %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'program_manager.management.commands.train': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'INFO'
        }
    }
}

MESSAGE_TAGS = {
        messages.ERROR: 'danger',
}

##########################
# Email sending settings #
##########################

# People who get code error notifications and notifications send via qscore.notifications.EmailAdminsNotificationSender
ADMINS = (
    # ('Joe', 'josephmfusaro@gmail.com'),
)

# The email address that error messages and email notifications come from, such as those sent to ADMINS and MANAGERS.
SERVER_EMAIL = ''

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'josephmfusaro@gmail.com'
EMAIL_HOST_PASSWORD = 'TYPE_YOUR_GMAIL_PASSWORD_HERE'
EMAIL_PORT = 587

###############################################################################
# API Keys
###############################################################################
KICKBOX_API_KEY = 'fc7897a98ad16af2ef014453ae09331ac6d77361bca768b4b9d9666d873c8835'
FULLCONTACT_API_KEY = 'da3a2cbed6806c5d'
google_api_key = 'AIzaSyBn_EiwhOLTmDV-2OnilgDsfRtcMFQQ6ZI'
TWILIO_SID = os.environ.get('TWILIO_SID', None) or 'AC36af3cf7c98ca4f1f1a9491388d11d5b'
TWILIO_TOKEN = os.environ.get('TWILIO_TOKEN', None) or 'f15662112453132c5330048a54e5aabc'
MAILGUN_PUBLIC_KEY = 'pubkey-e00b4ddf2425540fadc86030efebcf88'
MAILGUN_SECRET_KEY = 'key-9aad55e41b5601be808dca982eab7ffa'


###############################################################################
# Neo4j Settings
###############################################################################
from neo4jrestclient.client import GraphDatabase
graphene_url = 'http://app44121378:n4BAnuCjscZYs5XgwYma@app44121378.sb02.stations.graphenedb.com:24789'
gdb = GraphDatabase(graphene_url + '/db/data')


###############################################################################
# Rollbar Settings
#
# NOTE: These are placed after the hosting environment detection since there
# is a dependency on DEBUG
###############################################################################

ROLLBAR = {
    'access_token': '120eac4093b4457ca775cab54cafb5c6',
    'environment': 'development',
    'branch': 'master',
    'root': BASE_DIR,
}

###############################################################################
# Normalizer API configuration
###############################################################################
NORMALIZER_API_HOST = 'http://ccrpc.broadlook.com/'

# Generate app version from git describe output.
try:
    APP_VERSION = subprocess.check_output(['git', 'describe', '--tags', '--abbrev=8', '--long'], stderr=open(os.devnull, 'w')).strip()
except:
    APP_VERSION = os.environ.get('APP_VERSION', '<unavailable>')

###############################################################################
# Detect the environment and load some variable set
###############################################################################

on_heroku = False  # By default set on_heroku to false.

if 'ON_HEROKU' in os.environ:
    on_heroku=True
else:
    on_heroku=False
        # Future: Some other environments can go here (eg. AWS)

if on_heroku:
    from rl_proto2.heroku_settings import *
else:
    from rl_proto2.local_settings import *
